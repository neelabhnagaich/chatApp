
package chat.net.gui;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import java.util.Date;

/**
 *
 * @author neelabh
 */
public class ServerFrame extends javax.swing.JFrame {

  ServerSocket svc;
  ArrayList<String> userNames = new ArrayList<>();
  ArrayList<PrintWriter> printWriters = new ArrayList<>();
   FileWriter fw;
   PrintWriter fpw;
   SimpleDateFormat sdf;
   Date date ;
    public ServerFrame() {
        initComponents();
        try{
        fw = new FileWriter("chatlogs.txt",true);
        fpw = new PrintWriter(fw,true);
        sdf = new SimpleDateFormat("HH:mm:ss ,dd-MMM-yyy");
        date = new Date();
        
        }
        catch (IOException ex) {
            ex.printStackTrace();
            return;
        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnStartServer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtList = new javax.swing.JTextArea();
        btnStopServer = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnStartServer.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnStartServer.setText("start");
        btnStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartServerActionPerformed(evt);
            }
        });

        txtList.setColumns(20);
        txtList.setRows(5);
        jScrollPane1.setViewportView(txtList);

        btnStopServer.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnStopServer.setText("stop");
        btnStopServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopServerActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Server");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(47, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnStartServer, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStopServer, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStartServer)
                    .addComponent(btnStopServer))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartServerActionPerformed
        
        txtList.setText("Waiting for clients");
        WaitForConnectionThread waitThread = new WaitForConnectionThread();
        waitThread.start();
        btnStartServer.setEnabled(false);
        btnStopServer.setEnabled(true);
        
        
        
    }//GEN-LAST:event_btnStartServerActionPerformed

    private void btnStopServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnStopServerActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        fpw.close();
        JOptionPane.showMessageDialog(null,"Chats logged succesfully");
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStartServer;
    private javax.swing.JButton btnStopServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtList;
    // End of variables declaration//GEN-END:variables
public class WaitForConnectionThread extends Thread
{
    Socket sock;
    WaitForConnectionThread()
    {
        
    }
    public void run()
    {
        try{
            svc = new ServerSocket(4567);
            while(true)
            {
                 sock = svc.accept();
                
                 
                 ChatHandlerThread chatHandler = new ChatHandlerThread(sock);
                 chatHandler.start();
                
            }
            
            
            
            
        }
        catch (IOException ex) {
            
        }
    }
    
}
    public class ChatHandlerThread extends Thread {

        Socket sock;

        public ChatHandlerThread(Socket sock) {

            this.sock = sock;
        }

        public void run() {
            try {
                PrintWriter pw = new PrintWriter(sock.getOutputStream());
                Scanner cl = new Scanner(sock.getInputStream());

                String name;
                pw.println("NAMEREQUIRED");
                pw.flush();
                while (true) {
                    if(cl.hasNext())
                    {
                    name = cl.nextLine();
                    if (userNames.isEmpty()) {
                        userNames.add(name);
                        pw.println("NAMEACCEPTED"+name);
                        pw.flush();
                        txtList.append("Connected clients ...\n");
                       // txtList.append(name + "from" + sock.getInetAddress() + "\n"); 
                       // printWriters.add(pw);
                        break;
                       
                    } 
                   
                   else if (userNames.contains(name)) {

                     pw.println("ALREADYEXIST");
                      pw.flush();
                     
                    }
                   else{ 
                        userNames.add(name);
                        pw.println("NAMEACCEPTED"+name);
                        pw.flush();
                        break;

                   }
                }
                }
                   
                    txtList.append(name + " from " + sock.getInetAddress() + "\n"); 
                    printWriters.add(pw);
                     
                       for(PrintWriter writer : printWriters)
                        {
                            
                            if(writer.equals(pw)==false)
                            {
                                
                            
                        
                                writer.println(name+" : "+"has joined the chat \n");
                                writer.flush();
                            }
                            
                        }
                    
                    while(true)
                    {
                       if(cl.hasNext())
                        {
                            
                        
                        String msg = cl.nextLine();
                        synchronized(fpw)
                                {
                                    if(msg.equalsIgnoreCase("quit")==false)
                                    {   fpw.println(name+" "+msg+"("+ sdf.format(new Date()) + ")");
                                        System.out.println("hiiii");
                                    }
                                }
                        
                       
                        for(PrintWriter writer : printWriters)
                        {
                            
                            if(writer.equals(pw)==false)
                            {
                                if(msg.equals("quit"))
                                {
                                  msg = " has left the chat room";
                                  
                                  sock.close();
                                  pw.close();
                                  userNames.remove(name);
                                  
                            
                        }
                                writer.println(name+" : "+msg);
                                writer.flush();
                            }
                            
                        }
                    }
                    }
                
                    

                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Exception in Server" + ex);
                ex.printStackTrace();
                return;
            }

        }
    }
}
